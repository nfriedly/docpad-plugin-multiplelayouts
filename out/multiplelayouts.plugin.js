// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var MultipleLayoutsPlugin, TaskGroup;
    TaskGroup = require('taskgroup').TaskGroup;
    return MultipleLayoutsPlugin = (function(_super) {
      __extends(MultipleLayoutsPlugin, _super);

      function MultipleLayoutsPlugin() {
        return MultipleLayoutsPlugin.__super__.constructor.apply(this, arguments);
      }

      MultipleLayoutsPlugin.prototype.name = 'multiplelayouts';

      MultipleLayoutsPlugin.prototype.extendCollections = function(opts) {
        var docpad, files, me;
        me = this;
        docpad = this.docpad;
        files = docpad.getFiles({
          additionalLayouts: {
            $exists: true
          }
        });
        files.on('remove', function(document) {
          return me.removeAdditionalLayoutsFor(document);
        });
        return this;
      };

      MultipleLayoutsPlugin.prototype.contextualizeBefore = function(opts, next) {
        var collection, database, docpad, me, sourcePageDocuments, tasks;
        me = this;
        docpad = this.docpad;
        database = docpad.getDatabase();
        tasks = new TaskGroup().once('complete', next);
        collection = opts.collection;
        sourcePageDocuments = collection.findAll({
          additionalLayouts: {
            $exists: true
          }
        });
        sourcePageDocuments.forEach(function(document) {
          return tasks.addTask(function(complete) {
            return me.removeAdditionalLayoutsFor(document, collection, complete);
          });
        });
        sourcePageDocuments.forEach(function(document) {
          return tasks.addGroup(function(addGroup, addTask) {
            var layouts;
            layouts = document.get('additionalLayouts');
            if (layouts == null) {
              return;
            }
            if (!Array.isArray(layouts)) {
              layouts = [layouts];
            }
            return layouts.forEach(function(layout) {
              return addTask(function(complete) {
                var newDoc, _ref;
                newDoc = (_ref = typeof docpad.cloneModel === "function" ? docpad.cloneModel(document) : void 0) != null ? _ref : document.clone();
                newDoc.removeUrl(newDoc.get('url'));
                newDoc.set({
                  filename: null
                });
                newDoc.setMeta({
                  fullPath: null,
                  url: null,
                  relativePath: document.get('relativeOutDirPath') + '/' + document.get('basename') + '-' + layout + '.' + document.get('extensions').join('.'),
                  layout: layout,
                  additionalLayoutFor: document.id,
                  additionalLayouts: null
                });
                return newDoc.normalize(function(err) {
                  var _ref1;
                  if (err) {
                    return complete(err);
                  }
                  database.add(newDoc);
                  if ((_ref1 = opts.collection) != null) {
                    _ref1.add(newDoc);
                  }
                  return complete();
                });
              });
            });
          });
        });
        tasks.run();
        return this;
      };

      MultipleLayoutsPlugin.prototype.removeAdditionalLayoutsFor = function(document, collection, next) {
        var database, docpad, files, tasks;
        docpad = this.docpad;
        database = docpad.getDatabase();
        tasks = new TaskGroup().setConfig({
          concurreny: 0
        });
        if (next) {
          tasks.once('complete', next);
        }
        files = docpad.getFiles({
          additionalLayoutFor: document.id
        });
        files.forEach(function(file) {
          return tasks.addTask(function(complete) {
            if (collection != null) {
              collection.remove(file);
            }
            database.remove(file);
            return file["delete"](complete);
          });
        });
        tasks.run();
        return this;
      };

      return MultipleLayoutsPlugin;

    })(BasePlugin);
  };

}).call(this);
